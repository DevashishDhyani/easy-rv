monitor ab5;
interface of ab5 {
	bool A;  
	bool B; 
}

policy AB5 of ab5 {
	internals {
		dtimer_t v;
	}

	states {

		//first state is initial, and represents "We're waiting for an A"
		s0 accepting {
			//if we receive neither A nor B, do nothing														
			-> s0 on (!A and !B): v := 0;

			//if we receive an A only, head to state s1							
			-> s1 on (A and !B): v := 0;
			
			//if we receive a !A and B then VIOLATION							
			-> violation on (!A and B);

			//if we receive both A and B then done
			-> done on (A and B);	
		}

		//s1 is "we're waiting for a B, and it needs to get here within 5 ticks"
		s1 rejecting {
			//if we receive nothing, and we aren't over-time, then we do nothing														
			-> s1 on (!A and !B and v < 5);	

			//if we receive a B only, head to state s0					
			-> s0 on (!A and B);

			//if we go overtime, or we receive another A, then VIOLATION	
			-> violation on ((v >= 5) or (A and B) or (A and !B));
			-> violation on (v >= 5) recover B := 1;
			-> violation on (A and B) or (A and !B);	
		}

		done accepting trap;

		violation rejecting trap;
	}
}
